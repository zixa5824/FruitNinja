@startuml
package Model{
package SliceableObjects {

    interface ISliceableObject <<Interface>>{
        +getObjectType(): String
        +getXlocation(): int
        +getYlocation(): int
        +getMaxHeight(): int
        +getInitialVelocity(): int
        +getFallingVelocity(): int
        +isSliced(): Boolean
        +hasMovedOffScreen(): Boolean
        +slice()
        +move()

    }


    abstract class Bomb {
        +slice():int
        +offscreen():int
    }
    abstract class Fruit{
        +slice():int
        +offscreen():int
        }

    abstract class SliceableObject {

        #associatedScore: int
        #associatedFallLiveLoss: int
        #xLocation: double
        #yLocation: double
        #maxHeight: double
        #initialVelocity: double
        #fallingVelocity: double
        #currentXVelocity: double
        #currentYVelocity: double
        #isSliced: boolean
        #hasMovedOffScreen: boolean
        #ObjectType: String
        #myImageView: ImageView
        #standardPrefSize: double
        #localPrefSize: double

        +move()

        }

    ISliceableObject <|-- SliceableObject

    SliceableObject <|-- Fruit
    SliceableObject <|--  Bomb

    Class SlowFruit {

    }

    Class NormalFruit{
        getMyImage():Image[]
    }

    Class FastFruit{

    }

    Class LifeFruit{
        slice():int
        getMyImage():Image[]
    }

    Class ExtraBonusFruit{

    }


    Fruit <|-- SlowFruit
    Fruit <|-- NormalFruit
    Fruit <|-- FastFruit
    Fruit <|-- LifeFruit
    Fruit <|-- ExtraBonusFruit

    Bomb <|-- DangerousBomb
    Bomb <|-- FatalBomb


}
package GameModes {
interface IGameModeStrategy <<Interface>> {
    +getInitialLives() : int
    +timerType() : int
    +NewBatch() :List<ISliceableObject>
    +goOffScreen()
    +sliceObjects():int
    +isGameOver():boolean
}

IGameModeStrategy <|-- ClassicMode
IGameModeStrategy <|-- ArcadeMode


Class ClassicMode {
    -initialLives: int
}


abstract class DifficultyDecorator

IGameModeStrategy <|-- DifficultyDecorator

DifficultyDecorator <|-- EasyMode
DifficultyDecorator <|-- HardMode


}

ISliceableObject <-- IGameModeStrategy
}



package Controller {
    interface GameActions <<Interface>> {
    checkGameOver():
    createGameObject():
    throwOffScreen():
    updateObjectsLocations():
    sliceObjects():
    saveGame():
    loadGame():
    resetGame():
    }

    Class GameController{
             -score:int
        	 -lives :int
        	 -timeS:double
        	 -gameModeStrategy:IGameModeStrategy
        	 -{static}instance:GameController
        	 -observerLabels:ArrayList<Label>

    }

    GameActions <|-- GameController


}

IGameModeStrategy <--> GameController

package view {

    class GuiGamePlayView{



    }

    GuiGamePlayView --> GameActions

}

@enduml